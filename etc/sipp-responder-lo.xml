<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE scenario SYSTEM "sipp.dtd">

<!-- This program is free software; you can redistribute it and/or      -->
<!-- modify it under the terms of the GNU General Public License as     -->
<!-- published by the Free Software Foundation; either version 2 of the -->
<!-- License, or (at your option) any later version.                    -->
<!--                                                                    -->
<!-- This program is distributed in the hope that it will be useful,    -->
<!-- but WITHOUT ANY WARRANTY; without even the implied warranty of     -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the      -->
<!-- GNU General Public License for more details.                       -->
<!--                                                                    -->
<!-- You should have received a copy of the GNU General Public License  -->
<!-- along with this program; if not, write to the                      -->
<!-- Free Software Foundation, Inc.,                                    -->
<!-- 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA             -->
<!--                                                                    -->
<!--                 Sipp default 'uas' scenario.                       -->
<!--                                                                    -->

<scenario name="Basic UAS responder">
  <!-- By adding rrs="true" (Record Route Sets), the route sets         -->
  <!-- are saved and used for following messages sent. Useful to test   -->
  <!-- against stateful SIP proxies/B2BUAs.                             -->

  <nop> <action>
      <assignstr assign_to="my_media_port" value="[auto_media_port]"/>
  </action> </nop>

  <recv request="INVITE" crlf="true" rrs="true">
  <action>
    <ereg regexp="c=IN IP4 (([0-9]{1,3}\.){3}[0-9]{1,3})" search_in="body" check_it="true" assign_to="re,sdp_ip" />
  </action>
  </recv>
  <Reference variables="re" />

  <!-- The '[last_*]' keyword is replaced automatically by the          -->
  <!-- specified header if it was present in the last message received  -->
  <!-- (except if it was a retransmission). If the header was not       -->
  <!-- present or if no message has been received, the '[last_*]'       -->
  <!-- keyword is discarded, and all bytes until the end of the line    -->
  <!-- are also discarded.                                              -->
  <!--                                                                  -->
  <!-- If the specified header was present several times in the         -->
  <!-- message, all occurences are concatenated (CRLF seperated)        -->
  <!-- to be used in place of the '[last_*]' keyword.                   -->

<!-- outgoing proxy 
  <nop> <action>
      <assignstr assign_to="proxy_ip" value="[local_ip]"/>
      <assignstr assign_to="proxy_port" value="5060"/>
 </action> </nop>
-->


<!--jl:      [routes]-->

  <send>
    <![CDATA[

      SIP/2.0 180 Ringing
      [last_Via:]
      [last_Record-route]
      [last_From:]
      [last_To:];tag=[pid]SIPpTag01[call_number]
      [last_Call-ID:]
      [last_CSeq:]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      Content-Length: 0
    ]]>
  </send>

  <send retrans="1000">
    <![CDATA[
      SIP/2.0 200 OK
      [last_Via:]
      [last_Record-route]
      [last_From:]
      [last_To:];tag=[pid]SIPpTag01[call_number]
      [last_Call-ID:]
      [last_CSeq:]
      Contact: <sip:[service]@[local_ip]:[local_port];transport=[transport]>
      User-Agent: sipp@akademia
      Content-Type: application/sdp
      Content-Length: [len]

      v=0
      o=user1 53655765 2353687637 IN IP[local_ip_type] [local_ip]
      s=-
      c=IN IP[media_ip_type] [media_ip]
      t=0 0
      m=audio [$my_media_port] RTP/AVP 0
      a=rtpmap:8 PCMA/8000
      a=rtpmap:0 PCMU/8000

    ]]>
  </send>

  <recv request="ACK"
        optional="false"
        rtd="true"
        crlf="true">
  </recv>

  <!-- Play a pre-recorded PCAP file (RTP stream)                       -->
  <nop>
    <action> 
     <exec command="tcpdump-vent 10 -i lo -q -s 0 -w rtp_[$sdp_ip]_[pid]_[call_number].pcap src host [$sdp_ip] and dst port [$my_media_port]"/>
     <exec play_pcap_audio="/etc/sipshaman/pcap/g711a.pcap"/>
    </action>
  </nop>

  <recv request="BYE" timeout="100000" ontimeout="bye">
  </recv>

  <send>
    <![CDATA[

      SIP/2.0 200 OK
      [last_Via:]
      Contact: <sip:[local_ip]:[local_port];transport=[transport]>
      [last_To:]
      [last_From:]
      [last_Call-ID:]
      [last_CSeq:]
      User-Agent: sipp@akademia
      Content-Length: 0

    ]]>
  </send>

<nop next="end"/>

<label id="bye"/>

  <send retrans="500">
    <![CDATA[

      BYE [next_url] SIP/2.0
      [last_Via:]
      Max-Forwards: 70
      [last_Record-route]
      Contact: sip:sipp@[local_ip]:[local_port]
      To: SIPP test <sip:[service]@[remote_ip]:[remote_port]>[peer_tag_param]
      From: sipp <sip:sipp@[local_ip]:[local_port]>;tag=[pid]SIPpTag09[call_number]
      Call-ID: [call_id]
      CSeq: 2 BYE
      User-Agent: sipp@sip-services
      Content-Length: 0

    ]]>
  </send>

  <recv response="200" crlf="true">
  </recv>

<label id="end"/>
  <!-- Keep the call open for a while in case the 200 is lost to be     -->
  <!-- able to retransmit it if we receive the BYE again.               -->
  <timewait milliseconds="4000"/>


  <!-- definition of the response time repartition table (unit is ms)   -->
  <ResponseTimeRepartition value="10, 20, 30, 40, 50, 100, 150, 200"/>

  <!-- definition of the call length repartition table (unit is ms)     -->
  <CallLengthRepartition value="10, 50, 100, 500, 1000, 5000, 10000"/>

</scenario>

